generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userIDs     String[]
  seenBy      String[]
  lastMessage String?
  messages    Message[]
}

model House {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  details HouseDetail[]
  saved   SavedHouse[]
}

model HouseDetail {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  houseId String @db.ObjectId
  house   House  @relation(fields: [houseId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  chatId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  bathroom  BigInt
  bedroom   BigInt
  city      String
  createdAt DateTime @db.Date
  images    String[]
  latitude  String
  longitude String
  price     BigInt
  property  String
  title     String
  type      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  saved     SavedPost[]
  details   PostDetail?
}

model PostDetail {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  bus        BigInt
  desc       String
  income     String
  pet        String
  postId     String @unique @db.ObjectId
  post       Post   @relation(fields: [postId], references: [id])
  restaurant BigInt
  school     BigInt
  size       BigInt
  utilities  String
}
model SavedHouse {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  houseId String @db.ObjectId
  userId  String @db.ObjectId
  house   House  @relation(fields: [houseId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, houseId])
}

model SavedPost {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  postId    String @db.ObjectId
  userId    String @db.ObjectId
  post      Post @relation(fields: [postId], references: [id])
  user      User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar    String?
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  username  String   @unique
  posts     Post[]
  savedHouses SavedHouse[]
  savedPosts  SavedPost[]
}
